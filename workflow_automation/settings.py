"""
Django settings for workflow_automation project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-wpgjlaj=f(wf6mx+4ox&t=3rhy=&6f_38_r#pbz2j+@xk3zp4z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["localhost",]

# Use your custom user model
AUTH_USER_MODEL = "accounts.User"
# Application definition
INSTALLED_APPS = [
    # Django core
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Your content apps
    "website",
    "careers",
    "core",
    "directory_sync",
    "portals",
    "accounts",
    # Required by allauth
    "django.contrib.sites",
    # Auth stack
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.microsoft",
    "allauth.socialaccount.providers.google",
    # Optional security
    "axes",
    "taggit",
    # Wagtail
    "wagtail.sites",
    "wagtail.contrib.settings",
    "wagtail.contrib.forms",
    "wagtail.contrib.sitemaps",
    "wagtail.contrib.redirects",
    "wagtail.images",
    "wagtail.documents",
    "wagtail.snippets",
    "wagtail.users",
    "wagtail.search",
    "wagtail.admin",
    "wagtail",

]

SITE_ID = 1

# ------------------------
# Authentication backends
# ------------------------
AUTHENTICATION_BACKENDS = [
    # If using Axes standalone
    "axes.backends.AxesStandaloneBackend",  # comment out if not using Axes

    "django.contrib.auth.backends.ModelBackend",  # Django’s auth
    "allauth.account.auth_backends.AuthenticationBackend",  # allauth
]

# ------------------------
# Allauth configuration (new syntax)
# ------------------------
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_BLACKLIST = {"*"}  # disables username usage completely

# Login method(s) allowed
ACCOUNT_LOGIN_METHODS = {"email"}  # only email login

# Signup form fields — * = required
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]

# Custom account adapter for domain rules / SSO mapping
ACCOUNT_ADAPTER = "accounts.adapters.AccountAdapter"

# Link social logins to pre-synced users + enforce domain allow-list
SOCIALACCOUNT_ADAPTER = "accounts.adapters.LinkByEmailAdapter"

# Optional: hold your allowed SSO domains in settings (so adapters.py can read it)
ALLOWED_SSO_DOMAINS = {"bisk.edu.krd", "bis-kurdistan.co.uk"}  # or "bisk.edu.krd,bis-kurdistan.co.uk"

# Microsoft provider: restrict to your tenant (replace with your GUID)
# SOCIALACCOUNT_PROVIDERS = {
#     # "microsoft": {
#     #     # This keeps sign-in limited to your organization
#     #     "TENANT": "YOUR-TENANT-GUID",
#     #     # If you store client/secret in the DB via admin, you can omit "APP".
#     #     # If you prefer settings-based secrets, uncomment and fill:
#     #     # "APP": {"client_id": "...", "secret": "...", "key": ""},
#     # },
#     # You can add Google here later if you want it live now.
#     # "google": { ... }
# }
# Tell allauth to use YOUR tenant (not /common)
SOCIALACCOUNT_PROVIDERS = {
    "microsoft": {
        # Use lowercase 'tenant' (new allauth). Keep both keys to be safe.
        "tenant": "a900c69a-f53a-41cf-bf7d-e85abff49c35",
        "TENANT": "a900c69a-f53a-41cf-bf7d-e85abff49c35",

        # Optional but fine to keep:
        "SCOPE": ["openid", "email", "profile", "offline_access", "User.Read"],
        # Do NOT set "APP" here since you’re using the SocialApp in admin.
    }
}

# Always send users here after any successful login
LOGIN_REDIRECT_URL = "/accounts/post-login/"
ACCOUNT_LOGIN_REDIRECT_URL = LOGIN_REDIRECT_URL  # allauth

# Where to send users after logout – not post-login, to avoid loops
LOGOUT_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_REDIRECT_URL = LOGOUT_REDIRECT_URL

# Explicit login URL (used by @login_required)
LOGIN_URL = "/accounts/login/"

## single toggle for all social providers
# SOCIAL_SSO_ALLOW_SIGNUP = False   # set True to allow
## OR per provider
SOCIAL_SSO_ALLOW_SIGNUP = {
    "microsoft": True,
    "google": False,
}

# ------------------------
# Local account sing-up config
# ------------------------
# How it behaves now
#     Set LOCAL_ACCOUNT_ALLOW_LOGIN=True, LOCAL_ACCOUNT_ALLOW_SIGNUP=False:
#     Users can log in with local credentials, but no sign-up link appears; sign-up is blocked by the adapter.
#     Keep Azure/SSO users with set_unusable_password() so they naturally use Microsoft; local form won’t work for them.
LOCAL_ACCOUNT_ALLOW_LOGIN = True  # show local login form
LOCAL_ACCOUNT_ALLOW_SIGNUP = False  # set True to allow, False to block and hide "Create account" and block sign-up

# ------------------------
# Axes (optional) config
# ------------------------
AXES_FAILURE_LIMIT = 15
AXES_COOLOFF_TIME = 1  # hours
AXES_LOCKOUT_CALLABLE = None  # custom hook if needed

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # (LocaleMiddleware optional)
    # 'django.middleware.timezone.TimezoneMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # Optional (if you're using django-axes):
    "axes.middleware.AxesMiddleware",
]

ROOT_URLCONF = 'workflow_automation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                "django.template.context_processors.debug",
                'django.template.context_processors.request',  # allauth needs this
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "accounts.context_processors.ui_flags",
                # exposes your flags to every template (including LOCAL_ACCOUNT_ALLOW_SIGNUP for the login page).
                "portals.context_processors.portal_menu",
            ],
        },
    },
]

# TEMPLATES[0]["OPTIONS"]["context_processors"] += [
#     "portals.context_processors.portal_menu",
# ]

WSGI_APPLICATION = 'workflow_automation.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = 'UTC'
TIME_ZONE = "Asia/Baghdad"
# DB stays UTC (good practice).
# Django Admin and templates will display datetimes in Asia/Baghdad automatically.
# In templates, if you ever see UTC, add {{ dt|localtime }}.
USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# ✅ Static files (CSS, JS, etc.)
STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",  # for global static files
]
STATIC_ROOT = BASE_DIR / "staticfiles"  # used when running collectstatic

# ✅ Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django datetime behavior
# ├─ USE_TZ = True  (recommended)
# │  ├─ TIME_ZONE = "Asia/Baghdad"
# │  │  ├─ Save to DB: UTC (aware). e.g., 13:00 Baghdad → saved as 10:00 UTC
# │  │  ├─ Python returns: timezone-aware datetimes (UTC internally)
# │  │  ├─ Admin/templates show: auto-converted to Baghdad (13:00)
# │  │  └─ Notes: safest; multi-server friendly; DST handled; use timezone.localtime()
# │  └─ TIME_ZONE = "UTC"
# │     ├─ Save to DB: UTC (aware) (same)
# │     ├─ Python returns: aware (UTC)
# │     ├─ Admin/templates show: UTC (no visible conversion)
# │     └─ Notes: good for pure UTC sites; users see UTC times unless you convert
# │
# └─ USE_TZ = False  (not recommended for most apps)
#    ├─ TIME_ZONE = "Asia/Baghdad"
#    │  ├─ Save to DB: **naive local times** (no conversion). Typically whatever
#    │  │  your server produced (often system local time). If you used datetime.now(),
#    │  │  it’s whatever the OS is set to. No “UTC→local” math happens.
#    │  ├─ Python returns: **naive** datetimes (no tzinfo)
#    │  ├─ Admin/templates show: the same naive value (looks like Baghdad if your
#    │  │  server clock is set that way)
#    │  └─ Notes: easy to drift if server TZ changes; DST bugs; hard in multi-server setups
#    └─ TIME_ZONE = "UTC"
#       ├─ Save to DB: **naive** UTC-ish times (again, whatever your code/server produced)
#       ├─ Python returns: naive datetimes
#       ├─ Admin/templates show: same naive value (appears as UTC if your server runs UTC)
#       └─ Notes: still naive; no automatic conversion; less safe than USE_TZ=True

# Wagtail
WAGTAIL_SITE_NAME = "BISK"  # or whatever you want shown in /cms/
WAGTAILADMIN_BASE_URL = "http://localhost:8000"  # set your real domain in prod

# If you want to change destinations later without editing code.
# Those keys must match your Group names used as role slugs
# Your code checks u.groups.filter(name=ROLE_STUDENT). That means the Group names in Django must be exactly:
#     role_student
#     role_faculty
#     role_staff
#     role_parent
#     role_external
# If you created groups like “Students”, “Administration”, etc., these checks won’t match. You’ve got two good options:
#     Rename the groups in Admin to the slug names above (recommended; keeps code simple), or
#     Map your human names to slugs in the router (e.g., check both “Students” and role_student). If you prefer this, say the word and I’ll paste a tiny compatibility map so you can keep the friendly names.
ACCOUNTS_ROLE_REDIRECTS = {
    "role_student": "student:home",
    "role_faculty": "faculty:home",
    "role_staff": "staff:home",
    "role_parent": "guardian:home",
    "role_external": "external:home",
}

# Optional flags per deployment:
PORTAL_FEATURE_FLAGS = {
    # "appointments": True,
    # "purchases": False,
}
